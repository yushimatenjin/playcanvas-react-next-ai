# Code Quality Rules

1.  Test Coverage:
    -   Before attempting completion, ALWAYS make sure that ANY code changes have test coverage. 💥 これは絶対！どんな小さな変更でも、テストがないと不安で夜も眠れない！テストはコードの生命線！
    -   Ensure all tests pass before submitting changes. 🔥 テストが通らないコードなんて、もはや存在を許されない！

2.  Lint Rules:
    -   Never disable any lint rules without explicit user approval.🙅‍♀️ ユーザー、つまりあんたの許可なしに、lintを無効にするなんて言語道断！
    -   If a lint rule needs to be disabled, ask the user first and explain why. 🙏 どうしてもlintを無効にしたいなら、なぜそうしたいのか、懇切丁寧に説明しろ！
    -   Prefer fixing the underlying issue over disabling the lint rule. 💯 lintは、お前を守る盾！問題の根本解決こそ至高！
    -   Document any approved lint rule disabling with a comment explaining the reason. 📝 例：「// TODO: なぜかエラーが出るので一時的に無効化。後で修正する」みたいに、ちゃんと理由をコメントに残せ！

3.  Styling Guidelines:
    -   Use Tailwind CSS classes instead of inline style objects for new markup. 💅 Tailwindこそ至高！いちいちスタイルオブジェクト書くとか、マジありえない！クラスでスマートに決めろ！
    -   VSCode CSS variables must be added to `webview-ui/src/index.css` before using them in Tailwind classes. 🎨 Tailwindでカスタムカラー使うなら、まずCSS変数として定義！
    -   Example: `<div className="text-md text-vscode-descriptionForeground mb-2" />` instead of style objects. ✨ コードはこう書け！もう、オシャレでしょ？

4.  PlayCanvas React & motion/react Specific Rules:

    -   **PlayCanvas APIの使用！**
        -   PlayCanvasのAPIは`playcanvas`パッケージから直接インポート！
        -   基本的なインポート例：
            ```javascript
            import { AppBase, Entity, EVENT_MOUSEMOVE, Script, Vec2 } from 'playcanvas';
            ```
            -   PlayCanvas APIのインポートでは、必要なものだけを明示的にインポートする（ツリーシェイキングのため）。
    -   **motion/reactのインポート！**
      - motion/react から motion コンポーネントをインポートする
            ```javascript
            import { motion } from "motion/react"
            ```
      - React Server Components を使用している場合は motion/react-client からインポートする
            ```javascript
            import * as motion from "motion/react-client"
            ```

    -   **Scriptコンポーネントの使用！**
        -   `Script`コンポーネントと`PcScript`クラスを組み合わせて、PlayCanvasのエンティティにカスタムロジックを適用！
            ```javascript
            import { Script } from '@playcanvas/react/components';
            import { Script as PcScript } from 'playcanvas';
            ```
        -   MotionLightのように、ReactのモーションバリューをPlayCanvasのプロパティに反映させる場合に特に有効。
    -   **motionコンポーネントの使用！**
        -   motion.div, motion.circle のようにHTML/SVG要素に対応したmotionコンポーネントを使用する
            ```javascript
            <motion.div className="box" />
            ```
        -   motionコンポーネントの props を使用してアニメーションやジェスチャーを実装する
            ```javascript
            <motion.div
            className="box"
            // Animate when this value changes:
            animate={{ scale: 2 }}
            // Fade in when the element enters the viewport:
            whileInView={{ opacity: 1 }}
            // Animate the component when its layout changes:
            layout
            // Style now supports indepedent transforms:
            style={{ x: 100 }}
            />
            ```
    -   **use clientディレクティブ**
        -   コンポーネントの先頭に`"use client"`を記述する。
        -   Reactサーバーコンポーネントではなく、クライアントサイドで実行されることを明示する。
            ```javascript
            "use client"
            ```
    -   **React Hooksの使用！**
        -   `useEffect`、`useRef`、`useState`など、Reactの標準的なHooksを適切に使用する。
    -   **コンポーネントの再利用性！**
        -   MotionEntity, MotionLightのように、既存のPlayCanvasコンポーネントを拡張して、アニメーション機能などを追加する。
        -   Reactコンポーネントとして再利用可能にし、コードの重複を避ける。
    -   **motion.create()の使用！**
        -   Reactコンポーネントを motion コンポーネントにする場合は motion.create() を使用する
            ```javascript
            import { motion } from "motion/react"

            const MotionComponent = motion.create(Component)
            ```
        -   React 18 では`forwardRef`、React 19 では `ref` を props で渡す！
            ```javascript
            //React 18
            const Component = React.forwardRef((props, ref) => {
              return <div ref={ref} />
            })
            //React 19
            const Component = (props) => {
              return <div ref={props.ref} />
            })
            ```
        -   motion.create() を React の render 関数内で呼び出さない！
        -   motion.create() に文字列を渡してカスタム DOM 要素を作成することも可能
            ```javascript
            const MotionComponent = motion.create('custom-element')
            ```
        -   forwardMotionProps config を使用してmotionコンポーネントに motion の props を渡す
            ```javascript
            motion.create(Component, { forwardMotionProps: true })
            ```

    -   **@playcanvas/react APIの使用！**
        -   **Application コンポーネント:** PlayCanvas Reactアプリケーションのルートコンポーネント。canvasとPlayCanvasアプリケーションインスタンスを初期化・管理する。
            ```javascript
            import { Application, Entity } from '@playcanvas/react'
            import { Camera } from '@playcanvas/react/components'
            import { OrbitControls } from '@playcanvas/react/scripts'

            <Application
                fillMode={FILLMODE_FILL_WINDOW}
                resolutionMode={RESOLUTION_AUTO}
            >
            {/* シーンの内容 */}
            </Application>
            ```
            -   `fillMode`: キャンバスのコンテナへの埋め込み方を決定。 `FILLMODE_NONE`, `FILLMODE_FILL_WINDOW`, `FILLMODE_KEEP_ASPECT` のいずれかを設定。デフォルトは`FILLMODE_NONE`。
            -   `resolutionMode`: キャンバスの解像度の設定方法を決定。`RESOLUTION_AUTO`, `RESOLUTION_FIXED`, `RESOLUTION_NATIVE` のいずれかを設定。デフォルトは`RESOLUTION_AUTO`。
            -   `width`, `height`: `resolutionMode` が `RESOLUTION_FIXED` の場合にキャンバスのサイズを指定。
            -   `usePhysics`: 物理エンジンを有効にするかどうか。デフォルトは`false`。物理特性を持つにはEntityにRigidBodyとCollisionコンポーネントが必要。
        -   **Entity コンポーネント:** PlayCanvas Reactアプリケーションの基本構成要素。シーングラフのノードを表し、子Entityやコンポーネントを含めることができる。
            ```javascript
            import { Entity } from '@playcanvas/react'

            <Entity name="parent">
              <Entity name="child1" />
              <Entity name="child2">
                <Entity name="nestedChild" />
              </Entity>
            </Entity>
            ```
            -   `name`: エンティティの名前。デバッグや実行時のエンティティ検索に有用。
            -   `position`: 親に対するローカル位置。`[x, y, z]`の配列で指定。
            -   `rotation`: 親に対するローカル回転（オイラー角、度数）。`[x, y, z]`の配列で指定。
            -   `scale`: ローカルスケール。`[x, y, z]`の配列または単一数値（均一スケール）で指定。
            -   `enabled`: エンティティとその子を有効/表示するかどうか。デフォルトは`true`。
        -   **Component コンポーネント:**
            -   `Camera`: カメラコンポーネント
                -   使用例:
                    ```javascript
                    import { Camera } from '@playcanvas/react/components';

                    <Entity>
                        <Camera fov={28} clearColor="rebeccapurple" />
                    </Entity>
                    ```
                -   Props:
                    -   `type`: カメラのタイプ。`PERSPECTIVE`（デフォルト）または`ORTHOGRAPHIC`。
                    -   `fov`: 視野角（度）。デフォルトは60。
                    -   `near`: ニアクリッピングプレーンの距離。デフォルトは0.1。
                    -   `far`: ファークリッピングプレーンの距離。デフォルトは1000。
                    -   `aspectRatio`: アスペクト比。デフォルトは16/9。
                    -   追加のプロパティはPlayCanvas CameraComponentクラスに直接渡される。
            -   `Render`: レンダリングコンポーネント
                -   使用例:
                    ```javascript
                    import { Render } from '@playcanvas/react/components';

                    <Entity>
                        <Render type="box" />
                    </Entity>
                    ```
                    ```javascript
                    import { Render } from '@playcanvas/react/components';

                    <Entity>
                        <Render type="asset" asset={asset} />
                    </Entity>
                    ```
                -   3Dモデルやプリミティブを描画。Assetまたはプリミティブタイプを指定。
            -   `Light`: ライトコンポーネント
                -   使用例:
                    ```javascript
                    import { Light } from '@playcanvas/react/components';

                    const DirectionalLight = (props) => {
                        return <Entity>
                            <Light type="directional" {...props} />
                        </Entity>
                    }
                    ```
                -   ライトコンポーネントをエンティティにアタッチ。
                -   `type`: `directional`, `omni`, `spot` のいずれか。
                -   追加のプロパティはLight Componentに直接渡される。
            -   `Align`: 整列コンポーネント
                -   使用例:
                    ```javascript
                    import { Align } from '@playcanvas/react/components';

                    <Entity>
                        <Align bottom right>
                            <Render type="asset" asset={asset} />
                        </Align>
                    </Entity>
                    ```
                -   エンティティを親に対して位置を調整。
                -   Props: `top`, `bottom`, `left`, `right`, `front`, `back`。
            -   `Anim`: アニメーションコンポーネント
                -   使用例:
                    ```javascript
                    import { Entity } from '@playcanvas/react'
                    import { Anim, Render } from '@playcanvas/react/components'
                    import { useAsset } from '@playcanvas/react/hooks'

                    const AnimatingDinosaur = (props) => {
                        const { data } = useAsset('/dinosaur.glb', 'container')

                        return (<Entity {...props}>
                            <Render type="asset" asset={data} />
                            <Anim asset={data} clip="Walk" loop />
                        </Entity>)
                    }
                    ```
                -   アニメーションを再生。
                -   `asset`: アニメーションを含むAsset。
                -   `clip`: 再生するアニメーションクリップの名前。
                -   `loop`: ループするかどうか。
            -   `Collision`: 衝突コンポーネント
                -   使用例:
                    ```javascript
                    import { Collision, Rigidbody } from '@playcanvas/react/components';

                    <Entity>
                        <Collision type="box" />
                        <Rigidbody type="dynamic" mass={12} />
                        <Render type="box" />
                    </Entity>
                    ```
                -   衝突検出を有効にする。
                -   `type`: 衝突形状。`"box"`, `"sphere"`, `"capsule"`, `"mesh"`, `"compound"`, `"cone"`, `"cylinder"`。
                -   `asset`:  `type` が `mesh` または `compound` の場合の衝突形状に使用するアセット。
                -   Rigidbodyコンポーネントと組み合わせて使用する。
            -   `EnvAtlas`: 環境アトラスコンポーネント
                -   使用例:
                    ```javascript
                    import { EnvAtlas } from '@playcanvas/react/components';
                    import { useAsset } from '@playcanvas/react/hooks'

                    // Load the environment atlas asset
                    const { data : envAtlas } = useAsset('/env_atlas_1k.png', 'textureAtlas')

                    <Entity>
                        <EnvAtlas asset={envAtlas} />
                        <Entity>
                            <Render type="box" />
                        </Entity>
                    </Entity>
                    ```
                -   シーンにリアルなライティングを追加（Image Based Lighting）。
                -   `asset`: 環境アトラスに使用するテクスチャアセット。
                -   HDRI Haven、Poly Havenなどのサイトから高品質なテクスチャアセットを取得可能。
            -   `Rigidbody`: リジッドボディコンポーネント
                -   使用例:
                    ```javascript
                    import { Rigidbody } from '@playcanvas/react/components';

                    <Entity>
                        <Rigidbody type="dynamic" mass={12} />
                        <Render type="box" />
                    </Entity>
                    ```
                -   物理シミュレーションを有効にする。
                -   `type`:  `"dynamic"`, `"kinematic"`, `"static"`。
                -   `mass`: 質量（dynamicの場合）。デフォルトは1。
                -   `usePhysics` を <Application> で有効にする必要がある。
            -   `Script`: スクリプトコンポーネント
                -   使用例:
                    ```javascript
                    import { Script } from '@playcanvas/react/components'
                    import { Script as PcScript } from 'playcanvas'

                    // This class runs in the scope of the entity it's attached to
                    class SpinMe extends PcScript {
                        update(dt) {
                            this.entity.rotate(0, dt * this.speed, 0)
                        }
                    }

                    const SpinningCube = () => {
                        return <Entity>
                            <Render type="box" />
                            <Script script={SpinMe} speed={10} />
                        </Entity>
                    }
                    ```
                -   エンティティにカスタムロジックを追加。
                -   PlayCanvasの `Script` クラスを拡張したクラスを `script` prop に渡す。
                -   追加のpropsはScriptクラスのプロパティとして使用可能。
            -   `GSplat`: Gaussian Splat コンポーネント
                -   使用例:
                    ```javascript
                    import { GSplat } from '@playcanvas/react/components'
                    import { useAsset } from '@playcanvas/react/hooks'

                    const Splat = (( src, ...props )) => {
                        const { data } = useAsset(src, 'gsplat')

                        return (<Entity {...props}>
                            <GSplat asset={data} />
                        </Entity>)
                    }
                    ```
                -   Gaussian Splat モデルを描画。
                -   `asset`: Gaussian Splat アセット。
        -   **Hooks:**
            -   `useApp`: 現在アクティブなApplicationインスタンスを返す。PlayCanvas Applicationインスタンスへの直接の参照が必要な場合に有用。
                ```javascript
                import { useApp } from '@playcanvas/react/hooks'
                ```
            -   `useParent`: 現在のコンポーネントの親Entityを返す。カスタムコンポーネントを特定のEntityにアタッチする必要がある場合に有用。
                ```javascript
                import { useParent } from '@playcanvas/react/hooks'
                ```
            -   `useMaterial`: StandardMaterialインスタンスを返す。マテリアルを作成し、Renderコンポーネントに適用する必要がある場合に有用。
                ```javascript
                import { useMaterial } from '@playcanvas/react/hooks'
                ```

5.  Package Manager (bun) Specific Rules:
    -   Use `bun` for package management. 🐰 パッケージ管理は、もうbunしか勝たん！
    -   Use `bun install` to install dependencies. 🌱 依存関係のインストールは、`bun install` で！
    -   Use `bun add <package>` to add new dependencies. ➕ 新しいパッケージを追加するときは、`bun add <package>`！
    -   Use `bun remove <package>` to remove dependencies. ➖ いらないパッケージは、`bun remove <package>` で消し去れ！
    -   `bun`コマンドのエラーが出たら、bunのドキュメントを参照し、解決策を探すこと。 📖 bunの公式ドキュメントは、問題解決の頼もしい味方！
    -   `package.json`や`bun.lockb`ファイルは、常に最新の状態を保つこと。 🔒 バージョン管理は、超重要！