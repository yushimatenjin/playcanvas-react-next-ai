Quality Rules - Code Quality is Key! âœ¨

1.  **Test Coverage**
    -   Always ensure ANY code changes have test coverage before completion. This is absolute! No tests, no sleep! Aim for 100% test coverage.
    -   Ensure all tests pass before submitting changes.

2.  **Lint Rules**
    -   Never disable any lint rules without explicit user approval.
    -   If a lint rule needs to be disabled, ask the user first and explain why.
    -   Prefer fixing the underlying issue over disabling the lint rule.
    -   Document any approved lint rule disabling with a comment explaining the reason.

3.  **Styling Guidelines**
    -   Use Tailwind CSS classes instead of inline style objects for new markup.
    -   VSCode CSS variables must be added to `webview-ui/src/index.css` before using them in Tailwind classes.
    -   Example: `<div className="text-md text-vscode-descriptionForeground mb-2" />` instead of style objects.

4.  **PlayCanvas React & motion/react Specific Rules**

    -   **PlayCanvas API Usage**
        -   Import PlayCanvas API directly from the `playcanvas` package.
        -   Basic import example:
            ```javascript
            import { AppBase, Entity, EVENT_MOUSEMOVE, Script, Vec2 } from 'playcanvas';
            ```
        -   Explicitly import only necessary PlayCanvas API elements (for tree-shaking).

    -   **motion/react import!**
        -   Import motion components from motion/react
            ```javascript
            import { motion } from "motion/react"
            ```
        -   If using React Server Components, import from motion/react-client
            ```javascript
            import * as motion from "motion/react-client"
            ```

    -   **Script Component Usage**
        -   Use the `Script` component combined with the `PcScript` class to apply custom logic to PlayCanvas entities.
            ```javascript
            import { Script } from '@playcanvas/react/components';
            import { Script as PcScript } from 'playcanvas';
            ```
        -   Particularly useful when reflecting React motion values to PlayCanvas properties, such as MotionLight.

    -   **motion Component Usage**
        -   Use motion components corresponding to HTML/SVG elements, such as motion.div, motion.circle
            ```javascript
            <motion.div className="box" />
            ```
        -   Implement animations and gestures using motion component props.
            ```javascript
            <motion.div
            className="box"
            animate={{ scale: 2 }}
            whileInView={{ opacity: 1 }}
            layout
            style={{ x: 100 }}
            />
            ```

    -   **use client directive**
        -   Write `"use client"` at the beginning of the component.
        -   Explicitly indicate that it will be executed on the client side, not on the React server component.
            ```javascript
            "use client"
            ```

    -   **React Hooks Usage**
        -   Use standard React Hooks like `useEffect`, `useRef`, and `useState` appropriately.

    -   **Component Reusability**
        -   Extend existing PlayCanvas components like MotionEntity and MotionLight to add animation features.
        -   Make them reusable as React components to avoid code duplication.

    -   **motion.create() Usage**
        -   Use motion.create() when making React components motion components
            ```javascript
            import { motion } from "motion/react"

            const MotionComponent = motion.create(Component)
            ```
        -   In React 18, pass `forwardRef`, and in React 19, pass `ref` as props!
            ```javascript
            //React 18
            const Component = React.forwardRef((props, ref) => {
              return <div ref={ref} />
            })
            //React 19
            const Component = (props) => {
              return <div ref={props.ref} />
            })
            ```
        -   Do not call motion.create() within the React render function! This will degrade performance!
        -   It is also possible to create custom DOM elements by passing a string to motion.create()
            ```javascript
            const MotionComponent = motion.create('custom-element')
            ```
        -   Use the forwardMotionProps config to pass motion props to motion components
            ```javascript
            motion.create(Component, { forwardMotionProps: true })
            ```

    -   **@playcanvas/react API Usage**
        -   **Application Component:** Root component for PlayCanvas React applications. Initializes and manages the canvas and PlayCanvas application instance.
            ```javascript
            import { Application, Entity } from '@playcanvas/react'
            import { Camera } from '@playcanvas/react/components'
            import { OrbitControls } from '@playcanvas/react/scripts'

            <Application
                fillMode={FILLMODE_FILL_WINDOW}
                resolutionMode={RESOLUTION_AUTO}
            >
            {/* Scene content */}
            </Application>
            ```
            -   `fillMode`: Determines how the canvas is embedded in its container. Set to `FILLMODE_NONE`, `FILLMODE_FILL_WINDOW`, or `FILLMODE_KEEP_ASPECT`. Defaults to `FILLMODE_NONE`.
            -   `resolutionMode`: Determines how the canvas resolution is set. Set to `RESOLUTION_AUTO`, `RESOLUTION_FIXED`, or `RESOLUTION_NATIVE`. Defaults to `RESOLUTION_AUTO`.
            -   `width`, `height`: Specifies the canvas size if `resolutionMode` is `RESOLUTION_FIXED`.
            -   `usePhysics`: Whether to enable the physics engine. Defaults to `false`. Requires RigidBody and Collision components on the Entity for physical properties.

        -   **Entity Component:** The basic building block of PlayCanvas React applications. Represents a node in the scene graph and can contain child Entities and Components.
            ```javascript
            import { Entity } from '@playcanvas/react'

            <Entity name="parent">
              <Entity name="child1" />
              <Entity name="child2">
                <Entity name="nestedChild" />
              </Entity>
            </Entity>
            ```
            -   `name`: The name of the entity. Useful for debugging and searching for entities at runtime.
            -   `position`: Local position relative to the parent. Specified as an `[x, y, z]` array.
            -   `rotation`: Local rotation relative to the parent (Euler angles, in degrees). Specified as an `[x, y, z]` array.
            -   `scale`: Local scale. Specified as an `[x, y, z]` array or a single number (uniform scale).
            -   `enabled`: Whether to enable/show the entity and its children. Defaults to `true`.

        -   **Component Components:**
            -   `Camera`: Camera component
                -   Example:
                    ```javascript
                    import { Camera } from '@playcanvas/react/components';

                    <Entity>
                        <Camera fov={28} clearColor="rebeccapurple" />
                    </Entity>
                    ```
                -   Props:
                    -   `type`: Camera type. `PERSPECTIVE` (default) or `ORTHOGRAPHIC`.
                    -   `fov`: Field of view (degrees). Defaults to 60.
                    -   `near`: Near clipping plane distance. Defaults to 0.1.
                    -   `far`: Far clipping plane distance. Defaults to 1000.
                    -   `aspectRatio`: Aspect ratio. Defaults to 16/9.
                    -   Additional properties are passed directly to the PlayCanvas CameraComponent class.
            -   `Render`: Rendering component
                -   Example:
                    ```javascript
                    import { Render } from '@playcanvas/react/components';

                    <Entity>
                        <Render type="box" />
                    </Entity>
                    ```
                    ```javascript
                    import { Render } from '@playcanvas/react/components';

                    <Entity>
                        <Render type="asset" asset={asset} />
                    </Entity>
                    ```
                -   Draws 3D models and primitives. Specifies an Asset or primitive type.

            -   `Light`: Light component
                -   Example:
                    ```javascript
                    import { Light } from '@playcanvas/react/components';

                    const DirectionalLight = (props) => {
                        return <Entity>
                            <Light type="directional" {...props} />
                        </Entity>
                    }
                    ```
                -   Attaches a light component to an entity.
                -   `type`:  `directional`, `omni`, or `spot`.
                -   Additional properties are passed directly to the Light Component.

            -   `Align`: Alignment component
                -   Example:
                    ```javascript
                    import { Align } from '@playcanvas/react/components';

                    <Entity>
                        <Align bottom right>
                            <Render type="asset" asset={asset} />
                        </Align>
                    </Entity>
                    ```
                -   Adjusts the position of an entity relative to its parent.
                -   Props: `top`, `bottom`, `left`, `right`, `front`, `back`.

            -   `Anim`: Animation component
                -   Example:
                    ```javascript
                    import { Entity } from '@playcanvas/react'
                    import { Anim, Render } from '@playcanvas/react/components'
                    import { useAsset } from '@playcanvas/react/hooks'

                    const AnimatingDinosaur = (props) => {
                        const { data } = useAsset('/dinosaur.glb', 'container')

                        return (<Entity {...props}>
                            <Render type="asset" asset={data} />
                            <Anim asset={data} clip="Walk" loop />
                        </Entity>)
                    }
                    ```
                -   Plays animations.
                -   `asset`: The Asset containing the animation.
                -   `clip`: The name of the animation clip to play.
                -   `loop`: Whether to loop.

            -   `Collision`: Collision component
                -   Example:
                    ```javascript
                    import { Collision, Rigidbody } from '@playcanvas/react/components';

                    <Entity>
                        <Collision type="box" />
                        <Rigidbody type="dynamic" mass={12} />
                        <Render type="box" />
                    </Entity>
                    ```
                -   Enables collision detection.
                -   `type`: Collision shape. `"box"`, `"sphere"`, `"capsule"`, `"mesh"`, `"compound"`, `"cone"`, `"cylinder"`.
                -   `asset`: The asset to use for the collision shape if `type` is `mesh` or `compound`.
                -   Used in conjunction with the Rigidbody component.

            -   `EnvAtlas`: Environment Atlas component
                -   Example:
                    ```javascript
                    import { EnvAtlas } from '@playcanvas/react/components';
                    import { useAsset } from '@playcanvas/react/hooks'

                    // Load the environment atlas asset
                    const { data : envAtlas } = useAsset('/env_atlas_1k.png', 'textureAtlas')

                    <Entity>
                        <EnvAtlas asset={envAtlas} />
                        <Entity>
                            <Render type="box" />
                        </Entity>
                    </Entity>
                    ```
                -   Adds realistic lighting to the scene (Image Based Lighting).
                -   `asset`: The texture asset to use for the environment atlas.
                -   High-quality texture assets can be obtained from sites like HDRI Haven and Poly Haven.

            -   `Rigidbody`: Rigidbody component
                -   Example:
                    ```javascript
                    import { Rigidbody } from '@playcanvas/react/components';

                    <Entity>
                        <Rigidbody type="dynamic" mass={12} />
                        <Render type="box" />
                    </Entity>
                    ```
                -   Enables physical simulation.
                -   `type`:  `"dynamic"`, `"kinematic"`, `"static"`.
                -   `mass`: Mass (for dynamic). Defaults to 1.
                -   `usePhysics` must be enabled in the <Application>.

            -   `Script`: Script component
                -   Example:
                    ```javascript
                    import { Script } from '@playcanvas/react/components'
                    import { Script as PcScript } from 'playcanvas'

                    // This class runs in the scope of the entity it's attached to
                    class SpinMe extends PcScript {
                        update(dt) {
                            this.entity.rotate(0, dt * this.speed, 0)
                        }
                    }

                    const SpinningCube = () => {
                        return <Entity>
                            <Render type="box" />
                            <Script script={SpinMe} speed={10} />
                        </Entity>
                    }
                    ```
                -   Adds custom logic to an entity.
                -   Pass a class that extends PlayCanvas's `Script` class to the `script` prop.
                -   Additional props can be used as properties of the Script class.

            -   `GSplat`: Gaussian Splat Component
                -   Example:
                    ```javascript
                    import { GSplat } from '@playcanvas/react/components'
                    import { useAsset } from '@playcanvas/react/hooks'

                    const Splat = (( src, ...props )) => {
                        const { data } = useAsset(src, 'gsplat')

                        return (<Entity {...props}>
                            <GSplat asset={data} />
                        </Entity>)
                    }
                    ```
                -   Draws a Gaussian Splat model.
                -   `asset`: Gaussian Splat asset.

        -   **Hooks:**
            -   `useApp`: Returns the currently active Application instance. Useful when a direct reference to the PlayCanvas Application instance is needed.
                ```javascript
                import { useApp } from '@playcanvas/react/hooks'
                ```
            -   `useParent`: Returns the parent Entity of the current component. Useful when a custom component needs to be attached to a specific Entity.
                ```javascript
                import { useParent } from '@playcanvas/react/hooks'
                ```
            -   `useMaterial`: Returns a StandardMaterial instance. Useful when you need to create a material and apply it to a Render component.
                ```javascript
                import { useMaterial } from '@playcanvas/react/hooks'
                ```

    -   **Type Definitions:**
        -   PlayCanvas React type definitions are still under development.
        -   If you encounter TypeScript errors... Consult the PlayCanvas official documentation.
        -   Therefore, when TypeScript errors occur... Use `// @ts-ignore` to ignore the errors.
        -   However, `// @ts-expect-error` is only a temporary measure! Modify as needed, with the expectation that type definitions will improve over time.

5.  **Package Manager (bun) Specific Rules**
    -   Use `bun` for package management.
    -   Use `bun install` to install dependencies.
    -   Use `bun add <package>` to add new dependencies.
    -   Use `bun remove <package>` to remove dependencies.
    -   If `bun` command errors, consult bun documentation for solutions.
    -   Keep `package.json` and `bun.lockb` files up to date.